############################################################################################################
################################ Gravitee.IO Management API - Configuration ################################
############################################################################################################

############################################################################################################
# This file is the general configuration of Gravitee.IO Management API:
# - Properties (and respective default values) in comment are provided for information.
# - You can reference other property by using ${property.name} syntax
# - gravitee.home property is automatically set-up by launcher and refers to the installation path. Do not override it !
#
# Please have a look to http://docs.gravitee.io/ for more options and fine-grained granularity
############################################################################################################

# HTTP Server
jetty:
  #IP/hostname to bind to. Default is 0.0.0.0
  host: 0.0.0.0
  port: ${PORT}
  idleTimeout: 120000
#  acceptors: -1
#  selectors: -1
#  pool:
#    minThreads: 10
#    maxThreads: 200
#    idleTimeout: 60000
#    queueSize: 6000
#  jmx: false
#  statistics: false
#  accesslog:
#    enabled: true
#    path: ${gravitee.home}/logs/gravitee_accesslog_yyyy_mm_dd.log
#  secured: false
#  ssl:
#    keystore:
#      type: jks # Supports jks, pkcs12
#      path: ${gravitee.home}/security/keystore.jks
#      password: secret
#    truststore:
#      type: jks # Supports jks, pkcs12
#      path: ${gravitee.home}/security/truststore.jks
#      password: secret

http:
  api:
    # Configure the listening path for the API. Default to /
    entrypoint: /
    # Configure Management API and Portal API.
    #    management:
    #      enabled: true
    #      entrypoint: ${http.api.entrypoint}management
    #    portal:
    #      enabled: true
    #      entrypoint: ${http.api.entrypoint}portal
  cors:
    # Allows to configure the header Access-Control-Allow-Origin (default value: *)
    # '*' is a valid value but is considered as a security risk as it will be opened to cross origin requests from anywhere.
    allow-origin: '*'
    # Allows to define how long the result of the preflight request should be cached for (default value; 1728000 [20 days])
    max-age: 864000
    # Which methods to allow (default value: OPTIONS, GET, POST, PUT, DELETE)
    #allow-methods: 'OPTIONS, GET, POST, PUT, DELETE'
    # Which headers to allow (default values: Cache-Control, Pragma, Origin, Authorization, Content-Type, X-Requested-With, If-Match, X-Xsrf-Token)
    #allow-headers: 'X-Requested-With'
  csrf:
    # Allows to enable or disable the CSRF protection. Enabled by default.
    enabled: true
  hsts:
    enabled: true
    include-sub-domains: true
    max-age: 31536000

# Plugins repository
#plugins:
#  path:
#    - ${gravitee.home}/plugins
#    - ${gravitee.home}/my-custom-plugins
# If a external is already installed (but with a different version), management node does not start anymore
#  failOnDuplicate: true

# Management repository is used to store global configuration such as APIs, applications, apikeys, ...
# This is the default configuration using MongoDB (single server)
# For more information about MongoDB configuration, please have a look to:
# - http://api.mongodb.org/java/current/com/mongodb/MongoClientOptions.html
# management:
#   type: mongodb
#   mongodb:
#     dbname: ${ds.mongodb.dbname}
#     host: localhost
#     port: 10000
#     username: gravitee-mongodb-4280
#     password: u1pkNWymRZYeXzglfK4i
#    connectionsPerHost: 0
#    connectTimeout: 500
#    maxWaitTime: 120000
#    socketTimeout: 500
#    socketKeepAlive: false
#    maxConnectionLifeTime: 0
#    maxConnectionIdleTime: 0
#    serverSelectionTimeout: 0
#    description: gravitee.io
#    heartbeatFrequency: 10000
#    minHeartbeatFrequency: 500
#    heartbeatConnectTimeout: 1000
#    heartbeatSocketTimeout: 20000
#    localThreshold: 15
#    minConnectionsPerHost: 0
#    sslEnabled: false
#    threadsAllowedToBlockForConnectionMultiplier: 5
#    cursorFinalizerEnabled: true
# possible values are 1,2,3... (the number of node) or 'majority'
#    writeConcern: 1
#    wtimeout: 0
#    journal: true

# Management repository: single MongoDB using URI
# For more information about MongoDB configuration using URI, please have a look to:
# - http://api.mongodb.org/java/current/com/mongodb/MongoClientURI.html
management:
  type: mongodb
  mongodb:
    uri: <%= @mongo_url %>

# Management repository: clustered MongoDB
#management:
#  type: mongodb
#  mongodb:
#    servers:
#      - host: mongo1
#        port: 27017
#      - host: mongo2
#        port: 27017
#    dbname: ${ds.mongodb.dbname}
#    connectTimeout: 500
#    socketTimeout: 250

services:
  core:
    http:
      enabled: false
      port: 18083
      host: localhost
      authentication:
        # authentication type to be used for the core services
        # - none : to disable authentication
        # - basic : to use basic authentication
        # default is "basic"
        type: basic
        users:
          admin: adminadmin

  # metrics service
  metrics:
    enabled: true
    prometheus:
      enabled: false

  # v3 upgrader service. Can be disabled after first launch.
  v3-upgrader:
    enabled: true
  # AutoFetch service. (since 3.2)
  # Use to fetch periodically documentation pages.
  auto_fetch:
    enabled: true
    cron: "0 */5 * * * *"


# Analytics repository is used to store all reporting, metrics, health-checks stored by gateway instances
# This is the default configuration using Elasticsearch
analytics:
  type: elasticsearch
  elasticsearch:
    endpoints:
      - <%= "#{@elasticsearch_url.scheme}://#{@elasticsearch_url.host}:#{@elasticsearch_url.port}" %>
    security:
      username: <%= @elasticsearch_url.user %>
      password: <%= @elasticsearch_url.password %>
#    index: gravitee
#    index_per_type: true
#    cross_cluster:
#      mapping:
#        tenant_id: cluster_name
#        tenant_id: cluster_name
#    security:
#      username: user
#      password: secret
#    http:
#      timeout: 10000 # in milliseconds
#      proxy:
#        type: HTTP #HTTP, SOCK4, SOCK5
#        http:
#          host: localhost
#          port: 3128
#          username: user
#          password: secret
#        https:
#          host: localhost
#          port: 3128
#          username: user
#          password: secret

# Authentication and identity sources
# Users can have following roles (authorities):
#  USER: Can access portal and be a member of an API
#  API_PUBLISHER: Can create and manage APIs
#  API_CONSUMER: Can create and manage Applications
#  ADMIN: Can manage global system
security:
  # When using an authentication providers, use trustAll mode for TLS connections
  # trustAll: false
  providers:  # authentication providers
    - type: memory
      # allow search results to display the user email. Be careful, It may be contrary to the user privacy.
      #      allow-email-in-search-results: true
      # password encoding/hashing algorithm. One of:
      # - bcrypt : passwords are hashed with bcrypt (supports only $2a$ algorithm)
      # - none : passwords are not hashed/encrypted
      # default value is bcrypt
      password-encoding-algo: bcrypt
      users:
        - user:
          username: <%= ENV["GRAVITEE_ADMIN_USERNAME"] %>
          password: <%= @admin_password %>
          roles: ORGANIZATION:ADMIN,ENVIRONMENT:ADMIN
    - type: gravitee
## SMTP configuration used to send mails
email:
<% if @mail_url %>
  enabled: true
  host: <%= @mail_url.host %>
  subject: '<%= ENV["MAIL_SUBJECT_FORMAT"] %>'
  port: <%= @mail_url.port %>
  from: '<%= ENV["MAIL_SENDER_FROM"] %>'
  username: <%= @mail_url.user %>
  password: <%= @mail_url.password %>
  properties:
    auth: true
    starttls.enable: <%= @mail_url.port == 587 %>
    ssl.trust: <%= @mail_url.host %>
<% else %>
  enabled: false
<% end %>

# Mail templates
#templates:
#  path: ${gravitee.home}/templates

# Console dashboards
#console:
#  dashboards:
#    path: ${gravitee.home}/dashboards

# Portal themes
portal:
  entrypoint: <%= ENV["GRAVITEE_PORTAL_URL"] %>
#  themes:
#    path: ${gravitee.home}/themes

theme:
  name: default
  logo: themes/assets/ui-logo.png
  loader: assets/gravitee_logo_anim.gif
  css: themes/theme.css

# Referenced properties
ds:
  mongodb:
    dbname: gravitee
    host: localhost
    port: 27017
  elastic:
    host: localhost
    port: 9200

jwt:
  secret: <%= ENV["GRAVITEE_JWT_SECRET"] %>
  # Allows to define the end of validity of the token in seconds (default 604800 = a week)
  #expire-after: 604800
  # Allows to define the end of validity of the token in seconds for email registration (default 86400 = a day)
  #email-registration-expire-after: 86400
  # Allows to define issuer (default gravitee-management-auth)
  #issuer: gravitee-management-auth
  # Allows to define cookie context path (default /)
  #cookie-path: /
  # Allows to define cookie domain (default "")
  #cookie-domain: .gravitee.io
  # Allows to define if cookie secure only (default false)
  #cookie-secure: true

swagger:
  # Default scheme used when creating an API from a Swagger descriptor if there is no scheme specified.
  scheme: https

# User management configuration
user:
  login:
    # Create a default application when user connects to the portal for the very first time (default true)
    defaultApplication: false

  # Password complexity validation policy
  # Applications should enforce password complexity rules to discourage easy to guess passwords.
  # Passwords should require a minimum level of complexity that makes sense for the application and its user population.
  password:
    policy:
      # Regex pattern for password validation (default to OWASP recommendations).
      # 8 to 32 characters, no more than 2 consecutive equal characters, min 1 special characters (@ & # ...), min 1 upper case character.
      pattern: ^(?:(?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))(?!.*(.)\1{2,})[A-Za-z0-9!~<>,;:_\-=?*+#."'&§`£€%°()\\\|\[\]\-\$\^\@\/]{8,32}$
              # Example : ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\S+$).{8,}$
              # ^                # start-of-string
              #(?=.*[0-9])       # a digit must occur at least once
              #(?=.*[a-z])       # a lower case letter must occur at least once
              #(?=.*[A-Z])       # an upper case letter must occur at least once
              #(?=.*[@#$%^&+=])  # a special character must occur at least once
              #(?=\S+$)          # no whitespace allowed in the entire string
              #.{8,}             # anything, at least eight places though
              #$                 # end-of-string
  creation:
    token:
      #expire-after: 86400
  reference:
      # Secret key used to generate reference of a user which is unique (default: s3cR3t4grAv1t33.1Ous3D4R3f3r3nc3)
      # Must contains 32 chars (256 bits)
      #secret:
  anonymize-on-delete:
    #enabled: true

# Enable / disable documentation sanitize. Enabled by default.
documentation:
  markdown:
    sanitize: true

#imports:
  # Enable / disable import from private hosts. Enabled by default. (See https://en.wikipedia.org/wiki/Private_network)
#  allow-from-private: true
  # Empty whitelist means all urls are allowed. Note: allow-from-private is ignored when whitelist is defined.
#  whitelist:
#      - https://whitelist.domain1.com
#      - https://restricted.domain2.com/whitelisted/path

search:
  data: ${gravitee.home}/data

# global configuration of the http client
#httpClient:
#  timeout: 10000 # in milliseconds
#  proxy:
#    type: HTTP #HTTP, SOCK4, SOCK5
#    http:
#      host: localhost
#      port: 3128
#      username: user
#      password: secret
#    https:
#      host: localhost
#      port: 3128
#      username: user
#      password: secret

notifiers:
  email:
    enabled: true
    host: DEFAULT
    subject: DEFAULT
    port: 9999
#    username: ${email.username}
#    password: ${email.password}
#    starttls.enabled: false
#    ssl:
#      trustAll: false
#      keyStore:
#      keyStorePassword:
#  webhook:
#    enabled: true
    # Empty whitelist means all urls are allowed.
#    whitelist:
#      - https://whitelist.domain1.com
#      - https://restricted.domain2.com/whitelisted/path

# Allows to enable or disable recaptcha (see https://developers.google.com/recaptcha/docs/v3). Currently, it only affect the user registration route.
#reCaptcha:
#  enabled: false
#  siteKey:
#  secretKey:
#  minScore: 0.5
#  serviceUrl: https://www.google.com/recaptcha/api/siteverify

#el:
  # Allows to define which methods or classes are accessible to the Expression Language engine (/!\ caution, changing default whitelist may expose you to security issues).
  # A complete list of default whitelist methods can be found here (https://raw.githubusercontent.com/gravitee-io/gravitee-expression-language/master/src/main/resources/whitelist).
#  whitelist:
    # Allows to define if the specified list of method or classes should be append to the default one or should replace it.
    # We recommend you to always choose 'append' unless you absolutely kwnow what you are doing.
#    mode: append
    # Define the list of classes or methods to append (or set) to made accessible to the Expression Language.
    # start with 'method' to allow a specific method (complete signature).
    # start with 'class' to allow a complete class. All methods of the class will then be accessible.
#    list:
      # Ex: allow access to DateTimeFormatter.ofLocalizedDate(FormatStyle) method
      # - method java.time.format.DateTimeFormatter ofLocalizedDate java.time.format.FormatStyle
      # Ex: allow access to all methods of DateTimeFormatter class
      # - class java.time.format.DateTimeFormatter

#groovy:
  # Allows to define which methods, fields, constructors, annotations or classes are accessible to the Groovy Script (/!\ caution, changing default whitelist may expose you to security issues).
  # A complete list of default whitelist methods can be found here (https://raw.githubusercontent.com/gravitee-io/gravitee-policy-groovy/master/src/main/resources/groovy-whitelist).
#  whitelist:
    # Allows to define if the specified list of methods, fields, constructors or classes should be append to the default one or should replace it.
    # We recommend you to always choose 'append' unless you absolutely know what you are doing.
#    mode: append
    # Define the list of classes, methods, constructors, fields or annotations to append (or set) to made accessible to the Groovy Script.
    # start with 'method' to allow a specific method (complete signature).
    # start with 'class' to allow a complete class. All methods, constructors and fields of the class will then be accessible.
    # start with 'new' to allow a specific constructor (complete signature).
    # start with 'field' to allow access to a specific field of a class.
    # start with 'annotation' to allow use of a specific annotation.
#    list:
      # Ex: allow access to DateTimeFormatter.ofLocalizedDate(FormatStyle) method
      # - method java.time.format.DateTimeFormatter ofLocalizedDate java.time.format.FormatStyle
      # Ex: allow access to all methods, constructors and fields of DateTimeFormatter class
      # - class java.time.format.DateTimeFormatter
      # Ex: allow usage of field Integer.MAX_VALUE
      # - field java.lang.Integer MAX_VALUE
      # Ex: allow usage of @Override annotation
      # - annotation java.lang.Override

# Allows to enable or disable the 'Subscribe to newsletter' feature when user completes his profile on first log in. Default is enabled.
#newsletter:
#  enabled: true

# Specify the visibility duration of a gateway in Unknown State (in seconds)
# Default : 604800 seconds (7 days)
#gateway:
#  unknown-expire-after: 604800
